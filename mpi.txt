#include <mpi.h>
#include <stdio.h>
#include <stdlib.h>

int main(int argc, char* argv[]) {
    int rank, size;
    int N = 16;  // Total number of elements
    int array[N];
    int local_sum = 0, total_sum = 0;

    MPI_Init(&argc, &argv);
    MPI_Comm_rank(MPI_COMM_WORLD, &rank);
    MPI_Comm_size(MPI_COMM_WORLD, &size);

    // Check if the number of processes is greater than the number of elements
    if (size > N) {
        if (rank == 0) {
            printf("Error: The number of processes cannot be greater than the number of elements in the array.\n");
            printf("Enter the number of processes that is less than or equal to %d.\n", N);
        }
        MPI_Finalize();
        return 0;  // Exit if number of processes is invalid
    }

    int elements_per_proc = N / size;
    int remaining_elements = N % size;

    // Initialize the array on rank 0
    if (rank == 0) {
        for (int i = 0; i < N; i++) {
            array[i] = i + 1;  // Fill array with values 1 to N
        }
        printf("Original array: ");
        for (int i = 0; i < N; i++) {
            printf("%d ", array[i]);
        }
        printf("\n");
    }

    int local_size = elements_per_proc + (rank < remaining_elements ? 1 : 0);
    int* local_array = (int*)malloc(local_size * sizeof(int));

    int displs[size], send_counts[size];
    if (rank == 0) {
        int offset = 0;
        for (int i = 0; i < size; i++) {
            send_counts[i] = elements_per_proc + (i < remaining_elements ? 1 : 0);
            displs[i] = offset;
            offset += send_counts[i];
        }
    }

    // Scatter the array to all processes
    MPI_Scatterv(array, send_counts, displs, MPI_INT, local_array, local_size, MPI_INT, 0, MPI_COMM_WORLD);

    // Each process calculates its local sum
    for (int i = 0; i < local_size; i++) {
        local_sum += local_array[i];
    }
    free(local_array);

    // Print the local sum for each process
    printf("Processor %d calculated local sum: %d\n", rank, local_sum);

    // Use MPI_Reduce to get the total sum at root (rank 0)
    MPI_Reduce(&local_sum, &total_sum, 1, MPI_INT, MPI_SUM, 0, MPI_COMM_WORLD);

    // Rank 0 prints the total sum
    if (rank == 0) {
        printf("Total sum of array: %d\n", total_sum);
    }

    MPI_Finalize();
    return 0;
}

